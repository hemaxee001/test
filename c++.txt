//-----------------------------------multi object----------------------------------
#include <iostream>
using namespace std;
class myClass
{
    public:
    int a,b,total;
    void getValue()
    {
        cout<<"A: ";
        cin>>a;
        cout<<"B: ";
        cin>>b;
    }
    void getAns(myClass m,myClass m1)
    {
        total=m.a+m1.a;
        cout<<"total: "<<total<<endl;
    }
};
int main() {
    myClass m,m1;
    m.getValue();
    m1.getValue();
    m.getAns(m,m1);
  

    return 0;
}


//---------------------------array object---------------------------
#include <iostream>
using namespace std;
class myClass 
{
    public:
    int a,b;
    void getValue()
    {
        cout<<"A: ";
        cin>>a;
        cout<<"B: ";
        cin>>b;
    }
};
int main() {
    int n,i;
    myClass m[100];
    cout<<"N: ";
    cin>>n;
    
    for(i=0;i<n;i++)
    {
        m[i].getValue();
    }
   
  

    return 0;
}
--------------------------constructor-----------------------------
#include <iostream>
using namespace std;
class myClass 
{
  public:
  myClass()
  {
      cout<<" singal constructor....."<<endl;
      
  }
  myClass(int a)
  {
      cout<<"parameterised constructor 123....."<<endl;
  }
  myClass (char l)
  {
      cout<<"parameterised constructor good ......!!!"<<endl;
  }
    myClass(myClass &m)
    {
        cout<<"copy constructor.....!!"<<endl;
    }
};
int main() {
    myClass m;
    myClass m1(90);
    myClass m3('h');
    myClass m4(m);
   

    return 0;
}
-----------------------pass value & return value-----------------------------------
#include <iostream>
using namespace std;
class myClass 
{
  public:
  int total;
    int  getValue(int a,int b)
  {
      total=a+b;
    //   cout<<"total: "<<total;
    return total;
  }
};
int main() {
    myClass m;
    int sum=m.getValue(12,12);
    cout<<"total: "<<sum;
    
    return 0;
}
-------------------------------optional parametrised-----------------------------
#include <iostream>
using namespace std;
class myClass
{
    public:
    int total;
    void getValue(int a,int b=10)
    {
        total=a+b;
        cout<<"total: "<<total;
    }
};
int main() {
  myClass m;
  m.getValue(12,12);

    return 0;
}
-------------------------intialisation value---------------------------------
#include <iostream>
using namespace std;
class myClass 
{
    public:
    int a,b;
    myClass(int x,int y):a(x),b(y)
    {
        cout<<a<<endl;
        cout<<b<<endl;
    }
};
int main() {
    myClass m(12,23);
    

    return 0;
}
--------------------------distructor--------------------------------------
#include <iostream>
using namespace std;
class myClass 
{
  public:
  void getValue()
  {
      cout<<"function....."<<endl;
  }
  myClass()
  {
      cout<<"constructor...."<<endl;
  }
  ~myClass()
  {
      cout<<"distructor......"<<endl;
  }
  
};
int main() {
    myClass m;
    m.getValue();


    return 0;
}
-----------------------polymorphism------------------
	===========function overloading && overriding==============
#include <iostream>
using namespace std;
class myParent
{
  public:
  int a,b;
  void getValue()
  {
      a=10;
      b=20;
  }
};
class myChild : public myParent
{
    public:
    int total;
    void getValue()
    {
        total=a+b;
        cout<<"total: "<<total;
    }
};
// class myClass
// {
//     public:
//     void getValue(int a)
//     {
//         cout<<"overloading"<<endl;
//     }
//     void getAns(int x,int y)
//     {
//         cout<<"komal vandri che ....."<<endl;
//     }
// };
int main() {
    myChild m;
    m.myParent::getValue();
    m.getValue();
    // m.getValue(90);
    // m.getAns(10,10);
    
    return 0;
}
-------------------------namespace---------------------------
#include <iostream>
using namespace std;
namespace cdmi 
{
    int a=10;
    void get()
    {
        cout<<"this is test";
    }
}
using namespace cdmi;
int main() {
    cout<<a<<endl;
    get();
   

    return 0;
}
--------------------------------this keyword--------------------
#include <iostream>
using namespace std;
class myClass
{
  public:
  int a=10;
  void getValue(int a)
  {
      this -> a=a;
      
  }
  void getAns()
  {
      cout<<a;
  }
};
int main() {
    myClass m;
    m.getValue(20);
    m.getAns();
   

    return 0;
}
----------------------------const,static and scope resolution operator-------------------------------------
#include <iostream>
using namespace std;
int a=12;
class myClass
{
  public:
  static void getValue()
  {
     cout<<"hello"<<endl;
  }
    
};
int main() {
    const int a=90;
    cout<<"const keyword ===> "<<a<<endl;
    cout<<"local variable ====>"<<::a<<endl;
    myClass :: getValue();

    return 0;
}
--------------------------access modifier private and protected------------------------------
#include <iostream>
using namespace std;
//access modifire
//protected
class myClass
{
    protected:
    int a,b;

    void printMsg()
    {
        a=20;
        b=30;
    }
   
};
class myChild : public myClass
{
  public:
   void printMsgg()
    {
        cout<<a+b;
        
    }
};
int main() {
    myClass m;
    m.printMsg();
    m.printMsgg();
 
    return 0;
}
------------------------encapsulation-----------------------------
#include <iostream>
using namespace std;
//encapsulation
class myClass
{
    private:
    int a;
    public:
    void myGetter(int i)
    {
        a=i;
    }
    int mySetter()
    {
        return a;
    }
};
int main() {
    myClass m;
    m.myGetter(12);
    cout<<m.mySetter();
 

    return 0;
}
-------------------------------operator overloading -----------------------------
#include <iostream>
using namespace std;
//operator overloading
class myClass
{
    public:
    int a;
    myClass () : a(0)
    {
        
    }
    int operator ++()
    {
        cout<<"++ pre operator "<<endl;
        return a;
    }
    int operator ++(int)
    {
        cout<<"++ post operator"<<endl;
        return a;
    }
};
int main() {
    myClass m;
    ++m;
    m++;
   

    return 0;
}
------------------------------abstract keyword-------------------------------
#include <iostream>
using namespace std;
//absrac keyword
class myClass
{
    public:
    virtual int test()=0;
   void abc()
    {
        int t= test();
        cout<<"t: "<<t;
      
    }
    
};
class myChild : public myClass
{
    public:
   int test()
    {
        cout<<"hello word"<<endl;
        return 100;
    }
};
int main() {
    myChild m;
    m.abc();
   

    return 0;
}
-----------------------------excepation--------------------------
#include <iostream>
using namespace std;
//exception 
//============throw and try ....catch()...===================

int main() {
    cout<<"start of code ...."<<endl;
    try
    {
        throw runtime_error("this is the test");
    }
    catch(exception &e)
    {
        cout<<"error ==> "<<e.what()<<endl;
    }
    cout<<"end of code ...."<<endl;

    return 0;
}
-------------------------vector--------------------------
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector <int> number;
     number.push_back(12);
     number.push_back(216);
     number.push_back(25);
     
     cout<<"last no : "<<number.back()<<endl;
     cout<<"first no : "<<number.front()<<endl;
     
     number.pop_back();
     
     number.insert(number.begin()+2,14);
     number.clear();
    
    for(int i=0; i<number.size();i++)
    {
        cout<<"number: "<<number[i]<<endl;
    }

    return 0;
}
------------------------for each-----------------
#include <iostream>
using namespace std;
int main() {
   int no[]={12,52,63,75,85};
   for(int n : no)
   {
       cout<<"===> "<<n<<endl;
   }

    return 0;
}



